// Code generated by goyacc sql.y. DO NOT EDIT.

//line sql.y:2
// Copyright Huawei Cloud Computing Technologies Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package influxql

import __yyfmt__ "fmt"

//line sql.y:18

import (
	"fmt"
	"regexp"
	"sort"
	"strings"
	"time"

	"github.com/openGemini/openGemini/lib/util/lifted/vm/protoparser/influx"
)

const DefaultQueryTimeout = time.Duration(0)

func setParseTree(yylex interface{}, stmts Statements) {
	for _, stmt := range stmts {
		yylex.(*YyParser).Query.Statements = append(yylex.(*YyParser).Query.Statements, stmt)
	}
}

func deal_Fill(fill interface{}) (FillOption, interface{}, bool) {
	switch fill.(type) {
	case string:
		switch fill {
		case "null":
			return 0, nil, true
		case "none":
			return 1, nil, true
		case "previous":
			return 3, nil, true
		case "linear":
			return 4, nil, true
		default:
			return -1, nil, false
		}
	case int64:
		return 2, fill.(int64), true
	case float64:
		return 2, fill.(float64), true
	default:
		return -1, nil, false
	}
}

//line sql.y:65
type yySymType struct {
	yys              int
	stmt             Statement
	stmts            Statements
	str              string
	query            Query
	field            *Field
	fields           Fields
	sources          Sources
	source           Source
	sortfs           SortFields
	sortf            *SortField
	ment             *Measurement
	subQuery         *SubQuery
	dimens           Dimensions
	dimen            *Dimension
	int              int
	int64            int64
	float64          float64
	dataType         DataType
	expr             Expr
	tdur             time.Duration
	tdurs            []time.Duration
	bool             bool
	groupByCondition *GroupByCondition
	intSlice         []int
	inter            interface{}
	durations        *Durations
	hints            Hints
	strSlice         []string
	strSlices        [][]string
	location         *time.Location
	indexType        *IndexType
	cqsp             *cqSamplePolicyInfo
	fieldOption      *fieldList
	fieldOptions     []*fieldList
	indexOptions     []*IndexOption
	indexOption      *IndexOption
	databasePolicy   DatabasePolicy
	cmOption         *CreateMeasurementStatementOption
}

const FROM = 57346
const MEASUREMENT = 57347
const INTO = 57348
const ON = 57349
const SELECT = 57350
const WHERE = 57351
const AS = 57352
const GROUP = 57353
const BY = 57354
const ORDER = 57355
const LIMIT = 57356
const OFFSET = 57357
const SLIMIT = 57358
const SOFFSET = 57359
const SHOW = 57360
const CREATE = 57361
const FULL = 57362
const PRIVILEGES = 57363
const OUTER = 57364
const JOIN = 57365
const TO = 57366
const IN = 57367
const NOT = 57368
const EXISTS = 57369
const REVOKE = 57370
const FILL = 57371
const DELETE = 57372
const WITH = 57373
const ENGINETYPE = 57374
const COLUMNSTORE = 57375
const TSSTORE = 57376
const ALL = 57377
const ANY = 57378
const PASSWORD = 57379
const NAME = 57380
const REPLICANUM = 57381
const ALTER = 57382
const USER = 57383
const USERS = 57384
const DATABASES = 57385
const DATABASE = 57386
const MEASUREMENTS = 57387
const RETENTION = 57388
const POLICIES = 57389
const POLICY = 57390
const DURATION = 57391
const DEFAULT = 57392
const SHARD = 57393
const INDEX = 57394
const GRANT = 57395
const HOT = 57396
const WARM = 57397
const TYPE = 57398
const SET = 57399
const FOR = 57400
const GRANTS = 57401
const REPLICATION = 57402
const SERIES = 57403
const DROP = 57404
const CASE = 57405
const WHEN = 57406
const THEN = 57407
const ELSE = 57408
const BEGIN = 57409
const END = 57410
const TRUE = 57411
const FALSE = 57412
const TAG = 57413
const ATTRIBUTE = 57414
const FIELD = 57415
const KEYS = 57416
const VALUES = 57417
const KEY = 57418
const EXPLAIN = 57419
const ANALYZE = 57420
const EXACT = 57421
const CARDINALITY = 57422
const SHARDKEY = 57423
const PRIMARYKEY = 57424
const SORTKEY = 57425
const PROPERTY = 57426
const COMPACT = 57427
const CONTINUOUS = 57428
const DIAGNOSTICS = 57429
const QUERIES = 57430
const QUERIE = 57431
const SHARDS = 57432
const STATS = 57433
const SUBSCRIPTIONS = 57434
const SUBSCRIPTION = 57435
const GROUPS = 57436
const INDEXTYPE = 57437
const INDEXLIST = 57438
const SEGMENT = 57439
const KILL = 57440
const EVERY = 57441
const RESAMPLE = 57442
const DOWNSAMPLE = 57443
const DOWNSAMPLES = 57444
const SAMPLEINTERVAL = 57445
const TIMEINTERVAL = 57446
const STREAM = 57447
const DELAY = 57448
const STREAMS = 57449
const QUERY = 57450
const PARTITION = 57451
const TOKEN = 57452
const TOKENIZERS = 57453
const MATCH = 57454
const LIKE = 57455
const MATCHPHRASE = 57456
const CONFIG = 57457
const CONFIGS = 57458
const CLUSTER = 57459
const REPLICAS = 57460
const DETAIL = 57461
const DESTINATIONS = 57462
const SCHEMA = 57463
const INDEXES = 57464
const AUTO = 57465
const EXCEPT = 57466
const DESC = 57467
const ASC = 57468
const COMMA = 57469
const SEMICOLON = 57470
const LPAREN = 57471
const RPAREN = 57472
const REGEX = 57473
const EQ = 57474
const NEQ = 57475
const LT = 57476
const LTE = 57477
const GT = 57478
const GTE = 57479
const DOT = 57480
const DOUBLECOLON = 57481
const NEQREGEX = 57482
const EQREGEX = 57483
const IDENT = 57484
const INTEGER = 57485
const DURATIONVAL = 57486
const STRING = 57487
const NUMBER = 57488
const HINT = 57489
const BOUNDPARAM = 57490
const AND = 57491
const OR = 57492
const ADD = 57493
const SUB = 57494
const BITWISE_OR = 57495
const BITWISE_XOR = 57496
const MUL = 57497
const DIV = 57498
const MOD = 57499
const BITWISE_AND = 57500
const UMINUS = 57501

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FROM",
	"MEASUREMENT",
	"INTO",
	"ON",
	"SELECT",
	"WHERE",
	"AS",
	"GROUP",
	"BY",
	"ORDER",
	"LIMIT",
	"OFFSET",
	"SLIMIT",
	"SOFFSET",
	"SHOW",
	"CREATE",
	"FULL",
	"PRIVILEGES",
	"OUTER",
	"JOIN",
	"TO",
	"IN",
	"NOT",
	"EXISTS",
	"REVOKE",
	"FILL",
	"DELETE",
	"WITH",
	"ENGINETYPE",
	"COLUMNSTORE",
	"TSSTORE",
	"ALL",
	"ANY",
	"PASSWORD",
	"NAME",
	"REPLICANUM",
	"ALTER",
	"USER",
	"USERS",
	"DATABASES",
	"DATABASE",
	"MEASUREMENTS",
	"RETENTION",
	"POLICIES",
	"POLICY",
	"DURATION",
	"DEFAULT",
	"SHARD",
	"INDEX",
	"GRANT",
	"HOT",
	"WARM",
	"TYPE",
	"SET",
	"FOR",
	"GRANTS",
	"REPLICATION",
	"SERIES",
	"DROP",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"BEGIN",
	"END",
	"TRUE",
	"FALSE",
	"TAG",
	"ATTRIBUTE",
	"FIELD",
	"KEYS",
	"VALUES",
	"KEY",
	"EXPLAIN",
	"ANALYZE",
	"EXACT",
	"CARDINALITY",
	"SHARDKEY",
	"PRIMARYKEY",
	"SORTKEY",
	"PROPERTY",
	"COMPACT",
	"CONTINUOUS",
	"DIAGNOSTICS",
	"QUERIES",
	"QUERIE",
	"SHARDS",
	"STATS",
	"SUBSCRIPTIONS",
	"SUBSCRIPTION",
	"GROUPS",
	"INDEXTYPE",
	"INDEXLIST",
	"SEGMENT",
	"KILL",
	"EVERY",
	"RESAMPLE",
	"DOWNSAMPLE",
	"DOWNSAMPLES",
	"SAMPLEINTERVAL",
	"TIMEINTERVAL",
	"STREAM",
	"DELAY",
	"STREAMS",
	"QUERY",
	"PARTITION",
	"TOKEN",
	"TOKENIZERS",
	"MATCH",
	"LIKE",
	"MATCHPHRASE",
	"CONFIG",
	"CONFIGS",
	"CLUSTER",
	"REPLICAS",
	"DETAIL",
	"DESTINATIONS",
	"SCHEMA",
	"INDEXES",
	"AUTO",
	"EXCEPT",
	"DESC",
	"ASC",
	"COMMA",
	"SEMICOLON",
	"LPAREN",
	"RPAREN",
	"REGEX",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"DOT",
	"DOUBLECOLON",
	"NEQREGEX",
	"EQREGEX",
	"IDENT",
	"INTEGER",
	"DURATIONVAL",
	"STRING",
	"NUMBER",
	"HINT",
	"BOUNDPARAM",
	"AND",
	"OR",
	"ADD",
	"SUB",
	"BITWISE_OR",
	"BITWISE_XOR",
	"MUL",
	"DIV",
	"MOD",
	"BITWISE_AND",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:3486

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	4, 92,
	-2, 139,
	-1, 469,
	113, 156,
	132, 156,
	133, 156,
	134, 156,
	135, 156,
	136, 156,
	137, 156,
	140, 156,
	141, 156,
	-2, 145,
}

const yyPrivate = 57344

const yyLast = 1150

var yyAct = [...]int16{
	495, 900, 926, 510, 870, 772, 690, 422, 799, 891,
	711, 262, 392, 509, 789, 740, 643, 694, 704, 831,
	4, 550, 491, 628, 717, 70, 632, 235, 770, 551,
	383, 493, 138, 420, 205, 86, 441, 321, 229, 245,
	231, 318, 153, 173, 2, 279, 160, 161, 165, 166,
	88, 80, 850, 233, 390, 718, 719, 84, 85, 720,
	851, 496, 882, 670, 213, 721, 162, 163, 167, 164,
	160, 161, 165, 166, 497, 709, 74, 501, 162, 163,
	167, 164, 160, 161, 165, 166, 58, 148, 469, 348,
	349, 629, 178, 669, 348, 349, 630, 156, 88, 212,
	936, 212, 213, 154, 213, 446, 569, 348, 349, 445,
	605, 562, 206, 609, 610, 901, 898, 75, 281, 88,
	269, 884, 866, 270, 211, 214, 159, 874, 841, 868,
	76, 82, 79, 83, 81, 225, 87, 227, 348, 349,
	77, 80, 234, 73, 88, 840, 787, 84, 85, 869,
	864, 204, 168, 853, 172, 203, 207, 729, 206, 217,
	162, 163, 167, 164, 160, 161, 165, 166, 257, 786,
	228, 767, 724, 675, 202, 207, 646, 212, 207, 728,
	213, 674, 673, 266, 672, 181, 212, 607, 775, 213,
	608, 207, 88, 546, 264, 280, 248, 775, 315, 265,
	558, 88, 58, 573, 290, 560, 206, 75, 204, 88,
	549, 292, 203, 930, 296, 206, 547, 246, 288, 289,
	76, 82, 79, 83, 81, 433, 87, 543, 544, 207,
	77, 531, 260, 73, 220, 530, 331, 271, 272, 273,
	274, 275, 276, 277, 278, 145, 284, 313, 285, 334,
	505, 506, 410, 246, 332, 176, 409, 774, 508, 507,
	381, 143, 871, 800, 865, 351, 778, 162, 163, 167,
	164, 160, 161, 165, 166, 347, 298, 299, 300, 346,
	367, 307, 306, 644, 645, 312, 305, 742, 705, 552,
	634, 648, 647, 932, 382, 797, 764, 559, 763, 359,
	360, 361, 362, 363, 364, 755, 714, 366, 365, 396,
	713, 700, 659, 658, 350, 622, 621, 283, 604, 602,
	412, 601, 599, 352, 353, 597, 584, 444, 395, 583,
	582, 399, 401, 174, 454, 577, 705, 575, 561, 548,
	533, 459, 460, 502, 486, 417, 485, 482, 481, 462,
	456, 394, 146, 380, 379, 378, 375, 474, 475, 419,
	374, 373, 447, 207, 388, 370, 368, 339, 144, 338,
	337, 335, 330, 329, 328, 472, 467, 468, 207, 323,
	207, 461, 316, 463, 314, 310, 293, 286, 259, 221,
	397, 219, 215, 201, 490, 405, 199, 407, 476, 617,
	515, 615, 414, 169, 415, 581, 450, 158, 514, 657,
	585, 519, 171, 170, 521, 451, 535, 499, 571, 500,
	498, 498, 532, 580, 534, 246, 246, 169, 458, 542,
	517, 518, 448, 520, 408, 246, 171, 170, 336, 327,
	529, 827, 826, 444, 683, 570, 489, 538, 540, 541,
	488, 418, 88, 804, 567, 545, 803, 568, 69, 937,
	465, 915, 903, 902, 897, 883, 857, 503, 843, 835,
	801, 557, 796, 795, 579, 793, 576, 792, 706, 566,
	702, 572, 207, 574, 207, 701, 688, 592, 466, 452,
	606, 590, 387, 929, 593, 209, 589, 524, 878, 527,
	207, 598, 838, 587, 612, 596, 536, 849, 80, 744,
	689, 616, 618, 613, 84, 85, 591, 473, 635, 470,
	357, 611, 356, 639, 354, 326, 343, 712, 345, 637,
	638, 69, 931, 640, 916, 641, 631, 620, 660, 893,
	671, 656, 846, 623, 624, 813, 668, 794, 731, 636,
	664, 614, 666, 667, 350, 137, 732, 733, 384, 595,
	654, 655, 594, 586, 157, 319, 788, 177, 434, 662,
	663, 322, 665, 222, 75, 149, 88, 208, 151, 692,
	922, 693, 768, 844, 687, 836, 697, 76, 82, 79,
	83, 81, 71, 87, 835, 707, 708, 77, 671, 783,
	73, 682, 680, 194, 226, 322, 685, 207, 832, 195,
	925, 920, 703, 912, 240, 239, 771, 210, 320, 896,
	179, 479, 207, 413, 179, 698, 716, 308, 309, 303,
	304, 710, 406, 727, 715, 344, 191, 192, 404, 311,
	782, 735, 736, 342, 297, 188, 722, 189, 734, 726,
	498, 80, 320, 150, 737, 815, 769, 84, 85, 738,
	754, 743, 749, 748, 684, 58, 752, 753, 759, 750,
	761, 762, 652, 642, 757, 758, 739, 760, 184, 185,
	186, 523, 216, 745, 746, 267, 751, 268, 777, 3,
	435, 725, 301, 302, 756, 790, 182, 183, 723, 322,
	241, 765, 242, 875, 619, 781, 389, 287, 176, 261,
	776, 828, 876, 766, 258, 785, 190, 237, 80, 88,
	712, 691, 677, 556, 84, 85, 555, 791, 798, 554,
	238, 82, 79, 83, 81, 147, 87, 295, 810, 130,
	77, 806, 180, 553, 429, 432, 802, 430, 431, 805,
	247, 218, 812, 200, 808, 437, 820, 821, 809, 152,
	814, 823, 824, 819, 825, 816, 817, 142, 822, 135,
	565, 811, 695, 696, 877, 128, 246, 139, 125, 834,
	127, 780, 779, 818, 75, 129, 88, 139, 139, 140,
	784, 842, 747, 833, 678, 126, 837, 76, 82, 79,
	83, 81, 839, 87, 650, 651, 845, 77, 141, 578,
	73, 291, 848, 847, 526, 403, 855, 522, 852, 440,
	131, 386, 369, 862, 854, 324, 863, 136, 492, 856,
	861, 355, 858, 471, 371, 132, 133, 600, 483, 134,
	480, 872, 867, 464, 830, 249, 790, 790, 873, 859,
	860, 372, 829, 807, 398, 400, 402, 881, 886, 250,
	879, 880, 251, 411, 255, 890, 885, 253, 416, 626,
	627, 888, 889, 730, 892, 58, 511, 512, 139, 393,
	513, 254, 385, 263, 899, 59, 60, 393, 588, 140,
	198, 887, 906, 907, 904, 65, 58, 62, 909, 905,
	892, 913, 908, 914, 699, 139, 179, 63, 98, 917,
	140, 155, 377, 478, 140, 376, 155, 921, 923, 457,
	64, 928, 455, 453, 67, 449, 436, 341, 340, 61,
	333, 933, 928, 935, 934, 112, 294, 256, 252, 224,
	223, 197, 196, 391, 66, 93, 89, 603, 90, 91,
	80, 487, 484, 516, 100, 139, 84, 85, 193, 187,
	564, 525, 97, 528, 92, 68, 563, 439, 120, 438,
	537, 539, 80, 443, 94, 442, 96, 686, 84, 85,
	681, 679, 773, 918, 111, 108, 109, 110, 115, 101,
	919, 104, 927, 99, 910, 105, 234, 894, 911, 895,
	924, 95, 741, 421, 119, 102, 625, 117, 494, 118,
	103, 633, 282, 358, 175, 78, 75, 244, 88, 106,
	107, 243, 236, 504, 113, 114, 230, 232, 1, 76,
	82, 79, 83, 81, 72, 87, 54, 53, 477, 77,
	88, 52, 57, 56, 55, 116, 51, 50, 49, 121,
	325, 76, 82, 79, 83, 81, 124, 87, 48, 58,
	47, 77, 46, 45, 122, 44, 43, 42, 123, 59,
	60, 41, 40, 425, 426, 39, 38, 37, 36, 65,
	649, 62, 35, 653, 423, 427, 429, 432, 34, 430,
	431, 63, 661, 33, 32, 424, 31, 30, 29, 28,
	27, 26, 25, 24, 64, 23, 20, 19, 67, 21,
	18, 22, 17, 61, 16, 15, 428, 13, 14, 12,
	11, 676, 7, 10, 9, 8, 317, 6, 66, 5,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
}

var yyPact = [...]int16{
	1051, -1000, 403, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 445, 903,
	963, 734, 901, 762, 226, 210, 657, 538, 470, 1051,
	905, 655, 437, 268, 116, 887, 274, 887, -1000, -1000,
	191, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 448,
	899, 695, 617, -1000, 604, 955, 571, 658, 557, 954,
	509, 521, 935, 934, -1000, -1000, -1000, 881, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 254, 705, 251,
	70, 469, 488, -41, -41, 250, 901, 703, 249, 91,
	247, 465, 933, 932, -41, 512, -41, 880, -1000, 13,
	588, 702, 70, 838, 931, 860, 930, 888, -1000, 656,
	246, 89, -1000, 951, 872, 13, 910, 655, 614, -22,
	887, 887, 887, 887, 887, 887, 887, 887, -85, -12,
	175, 245, -1000, 641, 644, 644, 588, -1000, 780, 244,
	929, 901, 564, 899, 899, 613, 550, 144, 899, 548,
	243, 559, 899, 70, -1000, -1000, 242, -41, 240, 534,
	237, 794, 396, 301, 232, -1000, -1000, -1000, 231, 230,
	655, 910, -1000, -1000, 923, -1000, 880, -1000, 229, -1000,
	-1000, 300, 228, 227, 225, -1000, 921, 920, -1000, -1000,
	516, 508, -1000, -1000, 867, -60, -1000, 588, 298, 395,
	804, 393, 391, -1000, -1000, 167, -73, 224, 791, 223,
	827, 219, 218, 214, 908, 213, 212, -1000, 211, -41,
	-1000, 880, 434, 870, -1000, 951, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -109, -109, -109, -1000, -1000, -109, -1000,
	362, -1000, -1000, -1000, -1000, -1000, -1000, 887, 640, -1000,
	-11, 938, 866, -1000, 209, 880, 866, 899, 901, 901,
	784, 558, 899, 552, 899, 296, 114, 874, 543, 899,
	-1000, 899, 901, -1000, -1000, -1000, 319, 500, -1000, 1035,
	82, 450, 618, 919, 718, 788, -41, -33, 294, 918,
	277, 359, 916, -41, -1000, 915, 208, 912, 290, -1000,
	-41, -41, 13, 207, 13, 820, 330, 358, 588, 588,
	-85, -42, 390, 808, 888, 388, -41, -41, 909, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 906, 540,
	816, 206, 205, -1000, 814, 948, 204, 202, -1000, 947,
	318, 314, 872, 799, -81, -81, 880, -1000, 9, 201,
	887, 118, 862, 868, -1000, 866, 862, 901, 880, 872,
	880, 866, 786, 605, 899, 783, 899, 901, 93, 284,
	198, 866, 862, 899, 901, 901, 880, 872, 85, -1000,
	-1000, 1035, -1000, 49, 73, 197, 67, -1000, 147, 694,
	680, 677, 674, 628, 57, 155, 196, -34, -1000, -1000,
	738, -1000, -41, 327, 35, 280, 61, -1000, 61, 195,
	655, 193, 778, 888, 285, 188, -1000, 187, 184, -1000,
	272, -1000, 436, -1000, 13, 878, -1000, -1000, -1000, -1000,
	78, 387, 357, 888, 435, 432, -1000, 588, 183, 147,
	180, 813, -1000, 179, 177, 943, -1000, 176, -35, 44,
	434, 866, 384, -1000, 424, 262, 382, 260, -1000, -1000,
	872, -1000, 636, -73, 880, 174, 173, 321, 321, -1000,
	853, -52, -52, 148, 862, -1000, 880, 872, 872, 862,
	866, 862, 597, 151, 773, 774, 596, 901, 880, 872,
	271, 171, 170, -1000, 862, -1000, 901, 880, 872, 880,
	872, 872, 862, -56, -86, -1000, -1000, -1000, -1000, -1000,
	413, -1000, -1000, 40, 38, 37, 29, -1000, -1000, -1000,
	-1000, 673, 763, 507, 506, 312, -1000, -1000, -1000, -1000,
	591, 61, -1000, -1000, -1000, 484, 356, 381, 672, 473,
	-41, 737, -1000, -1000, -1000, -41, 13, 897, 169, 355,
	350, 194, -1000, 348, -41, -41, -55, 1035, 471, -1000,
	168, -1000, -1000, 164, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 799, 862, -87, -81, 627, 28, 620, 434, -1000,
	866, -1000, -1000, -1000, -1000, -1000, 36, 14, 858, -1000,
	-1000, -1000, -1000, 421, 431, -1000, 872, 862, 862, -1000,
	862, -1000, 151, 880, 145, 145, 380, 321, 321, 761,
	587, 586, 151, 880, 872, 872, 862, 163, -1000, -1000,
	-1000, 880, 872, 872, 862, 872, 862, 862, -1000, 156,
	154, 147, -1000, -1000, -1000, -1000, 663, 27, 547, 535,
	115, 535, 124, 748, -1000, -1000, 638, 541, 759, 655,
	-1000, 25, 2, 446, -41, -1000, -1000, -1000, -1000, 588,
	-1000, -1000, -1000, 347, 345, 420, -1000, 343, 342, -1000,
	-1000, -1000, 153, -1000, -1000, 866, 121, 340, -1000, -1000,
	-1000, -87, -1000, -1000, 326, -1000, 799, 862, 836, -1000,
	-52, 148, -1000, -1000, 862, -1000, -1000, -1000, 880, 866,
	-1000, 418, -1000, -1000, 145, -1000, -1000, 579, 151, 151,
	880, 872, 862, 862, -1000, -1000, 872, 862, 862, -1000,
	862, -1000, -1000, 310, 309, -1000, -1000, 651, 831, 823,
	518, 147, -1000, 115, 498, 489, 518, -1000, 373, -1000,
	-1000, 888, 1, -16, 672, 338, 480, -1000, 737, -1000,
	415, -60, -1000, -1000, 146, -1000, -1000, -1000, 862, -1000,
	378, -1000, -1000, -1000, -92, 866, -1000, 10, -1000, -1000,
	-1000, 866, 862, 145, 336, 151, 880, 880, 872, 862,
	-1000, -1000, 862, -1000, -1000, -1000, 7, 122, -21, -1000,
	-1000, 664, 6, 413, -1000, 120, 120, 664, -17, 635,
	654, -1000, -1000, 743, 369, -41, -41, -1000, 121, -83,
	335, -23, 862, -1000, 862, -1000, -1000, -1000, 880, 872,
	872, 862, -1000, -1000, -1000, -1000, 693, -1000, -1000, -1000,
	-1000, 412, -1000, 537, 334, -1000, -28, 672, -29, -1000,
	-1000, -1000, 333, -1000, 332, 121, -1000, 872, 862, 862,
	-1000, -1000, 693, 120, 530, -1000, 120, 115, -1000, -1000,
	331, 407, -1000, -1000, -1000, 862, -1000, -1000, -1000, -1000,
	527, -1000, 120, -1000, -1000, 476, -29, -1000, 525, -1000,
	-41, -1000, 364, -1000, -1000, 71, -1000, 405, 161, -29,
	-1000, -41, -43, 329, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 689, 1129, 1127, 1126, 1125, 20, 1124, 1123, 1122,
	1121, 1120, 1119, 1118, 1117, 1115, 1114, 1112, 1111, 1110,
	1109, 1107, 1106, 1105, 1103, 1102, 16, 1101, 1100, 1099,
	1098, 1097, 1096, 1094, 1093, 1088, 1082, 1078, 1077, 1076,
	1075, 1072, 1071, 1067, 1066, 6, 1065, 1063, 1062, 1060,
	1058, 1050, 1048, 1047, 1046, 1044, 1043, 1042, 1041, 1037,
	1036, 25, 18, 1034, 1028, 44, 555, 38, 40, 42,
	1027, 34, 1026, 53, 1023, 32, 1022, 1021, 27, 1017,
	1015, 76, 39, 15, 1014, 43, 1013, 1012, 26, 12,
	1011, 11, 30, 31, 1008, 13, 3, 1006, 22, 24,
	9, 7, 1003, 33, 35, 1002, 92, 10, 29, 0,
	1001, 17, 1000, 21, 28, 4, 999, 998, 14, 997,
	994, 2, 992, 990, 983, 8, 982, 5, 981, 980,
	977, 1, 23, 19, 37, 975, 973, 36, 41, 969,
	967, 966, 960,
}

var yyR1 = [...]uint8{
	0, 64, 65, 65, 65, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 6, 61, 61, 63, 63, 63, 63, 63, 63,
	85, 85, 84, 62, 62, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 69, 69, 66, 67, 67, 67, 67, 67, 67,
	67, 70, 68, 68, 68, 72, 73, 73, 73, 73,
	73, 71, 71, 71, 91, 91, 92, 92, 93, 93,
	109, 109, 94, 94, 94, 94, 94, 94, 94, 94,
	125, 125, 98, 98, 99, 99, 99, 99, 75, 75,
	77, 77, 76, 76, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 79, 82, 82, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 104, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 87, 87, 87,
	89, 89, 88, 88, 90, 90, 90, 95, 132, 132,
	96, 96, 96, 96, 97, 97, 97, 97, 2, 2,
	3, 3, 138, 138, 138, 138, 138, 134, 134, 4,
	103, 103, 102, 102, 102, 102, 102, 102, 102, 7,
	7, 74, 74, 74, 74, 8, 8, 9, 9, 5,
	5, 5, 10, 10, 100, 100, 101, 101, 101, 101,
	11, 11, 12, 14, 13, 13, 15, 15, 16, 17,
	19, 19, 19, 21, 21, 20, 20, 20, 22, 22,
	18, 23, 23, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 52, 52, 52, 52, 52, 106, 106, 24,
	24, 25, 25, 26, 26, 26, 26, 26, 83, 83,
	105, 27, 27, 28, 28, 28, 28, 29, 29, 29,
	29, 30, 30, 30, 30, 31, 31, 139, 139, 140,
	128, 128, 129, 129, 129, 114, 114, 133, 133, 133,
	141, 141, 142, 119, 119, 120, 120, 124, 124, 112,
	112, 51, 51, 137, 137, 135, 135, 136, 136, 136,
	126, 126, 127, 127, 115, 115, 107, 107, 116, 117,
	121, 121, 123, 122, 122, 122, 113, 113, 108, 32,
	33, 34, 35, 35, 35, 35, 36, 36, 36, 36,
	37, 37, 38, 38, 39, 40, 40, 41, 130, 130,
	130, 130, 42, 43, 44, 44, 44, 46, 46, 46,
	46, 47, 47, 45, 131, 131, 48, 48, 49, 49,
	50, 53, 54, 118, 118, 111, 111, 58, 58, 59,
	60, 60, 60, 60, 55, 56, 56, 56, 56, 56,
	57, 57, 57, 57, 57,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 11,
	12, 9, 1, 3, 1, 3, 3, 1, 3, 3,
	1, 2, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 2, 1, 1, 5,
	6, 2, 0, 2, 1, 3, 1, 3, 3, 5,
	1, 6, 3, 5, 3, 1, 5, 4, 4, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 1, 3,
	1, 1, 1, 3, 4, 6, 7, 1, 3, 1,
	4, 0, 4, 0, 1, 1, 1, 2, 2, 0,
	1, 3, 1, 3, 1, 3, 5, 5, 4, 6,
	6, 5, 6, 6, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	3, 0, 1, 3, 1, 2, 2, 2, 1, 1,
	4, 2, 2, 0, 4, 2, 2, 0, 2, 3,
	5, 4, 2, 1, 3, 3, 0, 3, 3, 2,
	1, 2, 1, 2, 2, 2, 2, 1, 2, 9,
	6, 2, 2, 2, 2, 5, 3, 7, 8, 6,
	9, 9, 5, 4, 1, 2, 3, 3, 3, 3,
	7, 6, 2, 3, 4, 3, 3, 2, 7, 6,
	6, 7, 6, 5, 4, 6, 7, 6, 5, 4,
	3, 8, 7, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 8, 7, 7, 6, 2, 0, 7,
	6, 11, 10, 2, 2, 4, 2, 2, 1, 3,
	1, 3, 2, 10, 9, 9, 8, 13, 12, 12,
	11, 10, 9, 9, 8, 5, 5, 0, 6, 10,
	0, 2, 0, 2, 6, 0, 2, 0, 2, 2,
	0, 3, 3, 0, 1, 0, 1, 0, 1, 0,
	2, 2, 0, 2, 1, 2, 2, 2, 3, 2,
	3, 3, 2, 0, 1, 3, 2, 0, 2, 2,
	3, 1, 2, 3, 3, 0, 1, 3, 1, 3,
	6, 4, 9, 8, 8, 7, 9, 8, 8, 7,
	2, 4, 7, 3, 3, 3, 5, 10, 3, 3,
	5, 0, 3, 6, 9, 11, 7, 4, 6, 2,
	4, 2, 4, 10, 1, 3, 8, 6, 2, 4,
	3, 2, 3, 1, 3, 1, 1, 10, 8, 2,
	3, 5, 7, 5, 2, 6, 6, 6, 6, 6,
	2, 6, 6, 10, 10,
}

var yyChk = [...]int16{
	-1000, -64, -65, -1, -6, -2, -3, -9, -5, -7,
	-8, -11, -12, -14, -13, -15, -16, -17, -19, -21,
	-22, -20, -18, -23, -24, -25, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -39, -40,
	-41, -42, -43, -44, -46, -47, -48, -49, -50, -52,
	-53, -54, -58, -59, -60, -55, -56, -57, 8, 18,
	19, 62, 30, 40, 53, 28, 77, 57, 98, 128,
	-61, 147, -63, 155, -81, 129, 142, 152, -80, 144,
	63, 146, 143, 145, 69, 70, -104, 148, 131, 43,
	45, 46, 61, 42, 71, -110, 73, 59, 5, 90,
	51, 86, 102, 107, 88, 92, 116, 117, 82, 83,
	84, 81, 32, 121, 122, 85, 142, 44, 46, 41,
	5, 86, 101, 105, 93, 44, 61, 46, 41, 51,
	5, 86, 101, 102, 105, 35, 93, -66, -75, 4,
	9, 46, 5, 35, 142, 35, 142, 78, -6, 37,
	115, 108, -1, -69, -75, 6, -61, 127, 139, 10,
	155, 156, 151, 152, 154, 157, 158, 153, -81, 129,
	139, 138, -81, -85, 142, -84, 64, 119, -106, 7,
	47, -106, 79, 80, 74, 75, 76, 4, 74, 76,
	58, 79, 80, 4, 94, 88, 7, 7, 9, 142,
	48, 142, -73, 142, 138, -71, 145, -104, 108, 7,
	129, -109, 142, 145, -109, 142, -66, -75, 48, 142,
	143, 142, 108, 7, 7, -109, 92, -109, -75, -67,
	-72, -68, -70, -73, 129, -78, -76, 129, 142, 27,
	26, 112, 114, -77, -79, -82, -81, 48, -73, 7,
	21, 24, 7, 7, 21, 4, 7, -6, 58, 142,
	143, -66, -91, 11, -67, -69, -61, 71, 73, 142,
	145, -81, -81, -81, -81, -81, -81, -81, -81, 130,
	-61, 130, -87, 142, 71, 73, 142, 66, -85, -85,
	-78, 31, -75, 142, 7, -66, -75, 80, -106, -106,
	-106, 79, 80, 79, 80, 142, 138, -106, 79, 80,
	142, 80, -106, -73, 142, -109, 142, -4, -138, 31,
	118, -134, 71, 142, 31, -51, 129, 138, 142, 142,
	142, -61, -69, 7, -75, 142, 138, 142, 142, 142,
	7, 7, 127, 10, 127, 20, -65, -68, 149, 150,
	-81, -78, 25, 26, 129, 27, 129, 129, -86, 132,
	133, 134, 135, 136, 137, 141, 140, 113, 142, 31,
	142, 7, 24, 142, 142, 142, 7, 4, 142, 142,
	142, -109, -75, -92, 124, 12, -66, 130, -81, 66,
	65, 5, -89, 13, 142, -75, -89, -106, -66, -75,
	-66, -75, -66, 31, 80, -106, 80, -106, 138, 142,
	138, -66, -89, 80, -106, -106, -66, -75, 132, -138,
	-103, -102, -101, 49, 60, 38, 39, 50, 81, 51,
	54, 55, 52, 143, 118, 72, 7, 37, -139, -140,
	31, -137, -135, -136, -109, 142, 138, -71, 138, 7,
	129, 138, 130, 7, -109, 7, 142, 7, 138, -109,
	-109, -67, 142, -67, 23, 130, 130, -78, -78, 130,
	129, 25, -6, 129, -109, -109, -82, 129, 7, 81,
	24, 142, 142, 24, 4, 142, 142, 4, 132, 132,
	-91, -98, 29, -93, -94, -109, 142, 155, -104, -93,
	-75, 68, 142, -81, -74, 132, 133, 141, 140, -95,
	-96, 14, 15, 12, -89, -96, -66, -75, -75, -91,
	-75, -89, 31, 76, -106, -66, 31, -106, -66, -75,
	142, 138, 138, 142, -89, -96, -106, -66, -75, -66,
	-75, -75, -91, 142, 143, -103, 144, 143, 142, 143,
	-113, -108, 142, 49, 49, 49, 49, -134, 143, 142,
	50, 142, 145, -141, -142, 32, -137, 127, 130, 71,
	-109, 138, -71, 142, -71, 142, -61, 142, 31, -6,
	138, 120, 142, 142, 142, 138, 127, -67, 10, -61,
	-6, 129, 130, -6, 127, 127, -78, 142, -113, 142,
	24, 142, 142, 4, 142, 145, -109, 143, 146, 69,
	70, -92, -89, 129, 127, 139, 129, 139, -91, 68,
	-75, 142, 142, -104, -104, -97, 16, 17, -132, 143,
	148, -132, -88, -90, 142, -96, -75, -91, -91, -96,
	-89, -95, 76, -26, 132, 133, 25, 141, 140, -66,
	31, 31, 76, -66, -75, -75, -91, 138, 142, 142,
	-96, -66, -75, -75, -91, -75, -91, -91, -96, 149,
	149, 127, 144, 144, 144, 144, -10, 49, 31, -128,
	95, -129, 95, 132, 73, -71, -130, 100, 130, 129,
	-45, 49, 106, -109, -111, 35, 36, -109, -67, 7,
	142, 130, 130, -6, -62, 142, 130, -109, -109, 130,
	-103, -107, 56, 142, 142, -98, -95, -99, 142, 143,
	146, 152, -93, 71, 144, 71, -92, -89, 143, 143,
	15, 127, 125, 126, -91, -96, -96, -95, -26, -75,
	-83, -105, 142, -83, 129, -104, -104, 31, 76, 76,
	-26, -75, -91, -91, -96, 142, -75, -91, -91, -96,
	-91, -96, -96, 142, 142, -108, 50, 144, 35, 109,
	-114, 81, -127, -126, 142, 73, -114, -127, 142, 34,
	33, 67, 99, 58, 31, -61, 144, 144, 120, -118,
	-109, -78, 130, 130, 127, 130, 130, 142, -89, -125,
	142, 130, -99, 130, 127, -98, -95, 17, -132, -88,
	-96, -75, -89, 127, -83, 76, -26, -26, -75, -91,
	-96, -96, -91, -96, -96, -96, 132, 132, 60, 21,
	21, -133, 90, -113, -127, 96, 96, -133, 129, -6,
	144, 144, -45, 130, 103, -111, 127, -62, -95, 129,
	144, 152, -89, 143, -89, -96, -83, 130, -26, -75,
	-75, -91, -96, -96, 143, 142, 143, -107, 123, 143,
	-115, 142, -115, -107, 144, 68, 58, 31, 129, -118,
	-118, -125, 145, 130, 144, -95, -96, -75, -91, -91,
	-96, -100, -101, 127, -119, -116, 82, 130, 144, -45,
	-131, 144, 130, 130, -125, -91, -96, -96, -100, -115,
	-120, -117, 83, -115, -127, 130, 127, -96, -124, -123,
	84, -115, 104, -131, -112, 85, -121, -122, -109, 129,
	142, 127, 132, -131, -121, -109, 143, 130,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 3,
	-2, 0, 62, 64, 67, 0, 167, 0, 87, 88,
	0, 169, 170, 171, 172, 173, 174, 176, 166, 198,
	278, 0, 278, 242, 0, 0, 0, 0, 0, 370,
	0, 0, 391, 398, 401, 409, 414, 420, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 389, 0, 0, 0, 139, 247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 0,
	0, 0, 4, 0, 115, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 70, 0, 199, 139, 0,
	226, 139, 0, 278, 278, 278, 0, 0, 278, 0,
	0, 0, 278, 0, 374, 382, 0, 0, 0, 206,
	0, 0, 332, 111, 0, 110, 112, 113, 0, 0,
	0, 92, 120, 121, 0, 243, 139, 245, 0, 260,
	359, 375, 0, 0, 0, 400, 410, 0, 246, 93,
	94, 96, 100, 105, 0, 138, 144, 0, 167, 0,
	0, 0, 0, 142, 140, 0, 155, 0, 373, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	402, 139, 117, 0, 91, 0, 63, 65, 66, 68,
	69, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	0, 85, 168, 177, 178, 179, 175, 0, 0, 71,
	0, 0, 181, 277, 0, 139, 181, 278, 139, 139,
	0, 0, 278, 0, 278, 272, 0, 181, 0, 278,
	361, 278, 139, 371, 392, 399, 0, 206, 201, 0,
	0, 203, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 244, 0, 0, 0, 387, 390,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 259, 0,
	0, 0, 115, 133, 0, 0, 139, 84, 0, 0,
	0, 0, 193, 0, 225, 181, 193, 139, 139, 115,
	139, 181, 0, 0, 278, 0, 278, 139, 0, 0,
	0, 181, 193, 278, 139, 139, 139, 115, 0, 200,
	209, 210, 212, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 305, 306,
	320, 331, 334, 0, 0, 111, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 376, 0, 0, 411,
	413, 95, 98, 97, 0, 102, 104, 141, 143, -2,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 253, 0, 0, 0, 258, 0, 0, 0,
	117, 181, 0, 116, 118, 122, 120, 127, 129, 114,
	115, 89, 0, 72, 139, 0, 0, 0, 0, 220,
	197, 0, 0, 0, 193, 241, 139, 115, 115, 193,
	181, 193, 0, 0, 0, 0, 0, 139, 139, 115,
	0, 0, 0, 276, 193, 280, 139, 139, 115, 139,
	115, 115, 193, 421, 422, 211, 213, 214, 215, 216,
	218, 356, 358, 0, 0, 0, 0, 204, 205, 207,
	208, 0, 229, 310, 312, 0, 333, 335, 336, 337,
	339, 0, 108, 111, 107, 381, 0, 0, 0, 397,
	0, 0, 249, 383, 388, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 347, 250,
	0, 252, 255, 0, 257, 360, 415, 416, 417, 418,
	419, 133, 193, 0, 0, 0, 0, 0, 117, 90,
	181, 221, 222, 223, 224, 187, 0, 0, 191, 188,
	189, 192, 180, 182, 184, 240, 115, 193, 193, 369,
	193, 262, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 115, 115, 193, 0, 274, 275,
	279, 139, 115, 115, 193, 115, 193, 193, 365, 0,
	0, 0, 236, 237, 238, 239, 227, 0, 0, 315,
	343, 315, 343, 0, 338, 106, 0, 0, 0, 0,
	386, 0, 0, 0, 0, 405, 406, 412, 99, 0,
	103, 146, 147, 0, 0, 73, 151, 0, 0, 156,
	248, 372, 0, 251, 256, 181, 131, 0, 134, 135,
	136, 0, 119, 123, 0, 128, 133, 193, 195, 196,
	0, 0, 185, 186, 193, 367, 368, 261, 139, 181,
	283, 288, 290, 284, 0, 286, 287, 0, 0, 0,
	139, 115, 193, 193, 296, 273, 115, 193, 193, 304,
	193, 363, 364, 0, 0, 357, 228, 0, 0, 0,
	317, 0, 311, 343, 0, 0, 317, 313, 0, 321,
	322, 0, 0, 0, 0, 0, 0, 396, 0, 408,
	403, 101, 149, 150, 0, 152, 153, 346, 193, 61,
	0, 132, 137, 124, 0, 181, 219, 0, 190, 183,
	366, 181, 193, 0, 0, 0, 139, 139, 115, 193,
	294, 295, 193, 302, 303, 362, 0, 0, 0, 230,
	231, 347, 0, 316, 342, 0, 0, 347, 0, 0,
	378, 379, 384, 0, 0, 0, 0, 74, 131, 0,
	0, 0, 193, 194, 193, 282, 289, 285, 139, 115,
	115, 193, 293, 301, 424, 423, 233, 308, 318, 319,
	340, 344, 341, 323, 0, 377, 0, 0, 0, 407,
	404, 59, 0, 125, 0, 131, 281, 115, 193, 193,
	300, 232, 234, 0, 325, 324, 0, 343, 380, 385,
	0, 394, 130, 126, 60, 193, 298, 299, 235, 345,
	327, 326, 0, 348, 314, 0, 0, 297, 329, 328,
	355, 349, 0, 395, 309, 0, 352, 351, 0, 0,
	330, 355, 0, 0, 350, 353, 354, 393,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:188
		{
			setParseTree(yylex, yyDollar[1].stmts)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:194
		{
			yyVAL.stmts = []Statement{yyDollar[1].stmt}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:198
		{
			if len(yyDollar[1].stmts) >= 1 {
				yyVAL.stmts = yyDollar[1].stmts
			} else {
				yylex.Error("excrescent semicolo")
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:206
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].stmt)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:214
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:218
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:222
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:226
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:230
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:234
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:238
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:242
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:246
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:250
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:254
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:258
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:262
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:266
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:270
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:274
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:278
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:282
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:286
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:290
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:294
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:298
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:302
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:306
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:310
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:314
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:318
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:322
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:326
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:330
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:334
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:338
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:342
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:354
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:358
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:362
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:366
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:374
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:378
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:398
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:402
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:406
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 59:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:432
		{
			stmt := &SelectStatement{}
			stmt.Fields = yyDollar[2].fields
			stmt.Sources = yyDollar[4].sources
			stmt.Dimensions = yyDollar[6].dimens
			stmt.ExceptDimensions = yyDollar[7].dimens
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			stmt.SLimit = yyDollar[10].intSlice[2]
			stmt.SOffset = yyDollar[10].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[8].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[11].location
			if len(yyDollar[3].sources) > 1 {
				yylex.Error("into clause only support one measurement")
			} else if len(yyDollar[3].sources) == 1 {
				mst, ok := yyDollar[3].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 60:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:473
		{
			stmt := &SelectStatement{}
			stmt.Hints = yyDollar[2].hints
			stmt.Fields = yyDollar[3].fields
			stmt.Sources = yyDollar[5].sources
			stmt.Dimensions = yyDollar[7].dimens
			stmt.ExceptDimensions = yyDollar[8].dimens
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			stmt.SLimit = yyDollar[11].intSlice[2]
			stmt.SOffset = yyDollar[11].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[9].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[12].location
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into clause only support one measurement")
			} else if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:515
		{
			stmt := &SelectStatement{}
			stmt.Fields = yyDollar[2].fields
			stmt.Dimensions = yyDollar[4].dimens
			stmt.ExceptDimensions = yyDollar[5].dimens
			stmt.Condition = yyDollar[3].expr
			stmt.SortFields = yyDollar[7].sortfs
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			stmt.SLimit = yyDollar[8].intSlice[2]
			stmt.SOffset = yyDollar[8].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[6].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[9].location
			yyVAL.stmt = stmt
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:546
		{
			yyVAL.fields = []*Field{yyDollar[1].field}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:550
		{
			yyVAL.fields = append([]*Field{yyDollar[1].field}, yyDollar[3].fields...)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:556
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:560
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: TAG}}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:564
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: FIELD}}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:568
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:572
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:582
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			c := yyDollar[1].expr.(*CaseWhenExpr)
			c.Conditions = append(c.Conditions, yyDollar[2].expr.(*CaseWhenExpr).Conditions...)
			c.Assigners = append(c.Assigners, yyDollar[2].expr.(*CaseWhenExpr).Assigners...)
			yyVAL.expr = c
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:595
		{
			c := &CaseWhenExpr{}
			c.Conditions = []Expr{yyDollar[2].expr}
			c.Assigners = []Expr{yyDollar[4].expr}
			yyVAL.expr = c
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.fields = []*Field{&Field{Expr: &VarRef{Val: yyDollar[1].str}}}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:608
		{
			yyVAL.fields = append([]*Field{&Field{Expr: &VarRef{Val: yyDollar[1].str}}}, yyDollar[3].fields...)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:614
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:618
		{
			yyVAL.expr = &BinaryExpr{Op: Token(DIV), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.expr = &BinaryExpr{Op: Token(ADD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:626
		{
			yyVAL.expr = &BinaryExpr{Op: Token(SUB), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:630
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_XOR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:634
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MOD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_AND), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:642
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_OR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:646
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:650
		{
			if strings.ToLower(yyDollar[1].str) == "cast" {
				if len(yyDollar[3].fields) != 1 {
					yylex.Error("The cast format is incorrect.")
				} else {
					name := "Unknown"
					if strings.ToLower(yyDollar[3].fields[0].Alias) == "bool" {
						name = "cast_bool"
					}
					if strings.ToLower(yyDollar[3].fields[0].Alias) == "float" {
						name = "cast_float64"
					}
					if strings.ToLower(yyDollar[3].fields[0].Alias) == "int" {
						name = "cast_int64"
					}
					if strings.ToLower(yyDollar[3].fields[0].Alias) == "string" {
						name = "cast_string"
					}
					cols := &Call{Name: strings.ToLower(name), Args: []Expr{}}
					cols.Args = append(cols.Args, yyDollar[3].fields[0].Expr)
					yyVAL.expr = cols
				}
			} else {
				cols := &Call{Name: strings.ToLower(yyDollar[1].str), Args: []Expr{}}
				for i := range yyDollar[3].fields {
					cols.Args = append(cols.Args, yyDollar[3].fields[i].Expr)
				}
				yyVAL.expr = cols
			}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			cols := &Call{Name: strings.ToLower(yyDollar[1].str)}
			yyVAL.expr = cols
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:686
		{
			switch s := yyDollar[2].expr.(type) {
			case *NumberLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			case *IntegerLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			default:
				yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: &IntegerLiteral{Val: -1}, RHS: yyDollar[2].expr}
			}

		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.expr = &DurationLiteral{Val: yyDollar[1].tdur}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:708
		{
			c := yyDollar[2].expr.(*CaseWhenExpr)
			c.Assigners = append(c.Assigners, yyDollar[4].expr)
			yyVAL.expr = c
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:714
		{
			yyVAL.expr = &VarRef{}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:720
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:724
		{
			yyVAL.sources = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:730
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.sources = []Source{yyDollar[1].ment}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:740
		{
			yyVAL.sources = append([]Source{yyDollar[1].ment}, yyDollar[3].sources...)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.sources = yyDollar[1].sources

		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:749
		{
			yyVAL.sources = append(yyDollar[1].sources, yyDollar[3].sources...)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:753
		{
			yyDollar[1].ment.Alias = yyDollar[3].str
			yyVAL.sources = []Source{yyDollar[1].ment}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:758
		{
			yyDollar[1].ment.Alias = yyDollar[3].str
			yyVAL.sources = append([]Source{yyDollar[1].ment}, yyDollar[5].sources...)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.sources = []Source{yyDollar[1].source}
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:769
		{
			join := &Join{}
			if len(yyDollar[1].sources) != 1 || len(yyDollar[4].sources) != 1 {
				yylex.Error("only support one query for join")
			}
			join.LSrc = yyDollar[1].sources[0]
			join.RSrc = yyDollar[4].sources[0]
			join.Condition = yyDollar[6].expr
			yyVAL.source = join
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:782
		{
			all_subquerys := []Source{}
			for _, temp_stmt := range yyDollar[2].stmts {
				stmt, ok := temp_stmt.(*SelectStatement)
				if !ok {
					yylex.Error("expexted SelectStatement")
				}
				build_SubQuery := &SubQuery{Statement: stmt}
				all_subquerys = append(all_subquerys, build_SubQuery)
			}
			yyVAL.sources = all_subquerys
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:795
		{
			if len(yyDollar[2].stmts) != 1 {
				yylex.Error("expexted SelectStatement length")
			}
			all_subquerys := []Source{}
			stmt, ok := yyDollar[2].stmts[0].(*SelectStatement)
			if !ok {
				yylex.Error("expexted SelectStatement")
			}
			build_SubQuery := &SubQuery{
				Statement: stmt,
				Alias:     yyDollar[5].str,
			}
			all_subquerys = append(all_subquerys, build_SubQuery)
			yyVAL.sources = all_subquerys
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:812
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:824
		{
			mst := yyDollar[5].ment
			mst.Database = yyDollar[1].str
			mst.RetentionPolicy = yyDollar[3].str
			yyVAL.ment = mst
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:831
		{
			mst := yyDollar[4].ment
			mst.RetentionPolicy = yyDollar[2].str
			yyVAL.ment = mst
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:837
		{
			mst := yyDollar[4].ment
			mst.Database = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			mst := yyDollar[3].ment
			mst.RetentionPolicy = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}

			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:874
		{
			yyVAL.dimens = yyDollar[3].dimens
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:878
		{
			yyVAL.dimens = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:884
		{
			yyVAL.dimens = yyDollar[2].dimens
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:888
		{
			yyVAL.dimens = nil
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.dimens = []*Dimension{yyDollar[1].dimen}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:898
		{
			yyVAL.dimens = append([]*Dimension{yyDollar[1].dimen}, yyDollar[3].dimens...)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.str = yyDollar[1].str
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.str = yyDollar[1].str
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:918
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:922
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}}}}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:930
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: yyDollar[5].tdur}}}}
		}
	case 126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:938
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: time.Duration(-yyDollar[6].tdur)}}}}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:950
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.dimen = &Dimension{Expr: &RegexLiteral{Val: re}}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:965
		{
			if strings.ToLower(yyDollar[1].str) != "tz" {
				yylex.Error("Expect tz")
			}
			loc, err := time.LoadLocation(yyDollar[3].str)
			if err != nil {
				yylex.Error("nable to find time zone")
			}
			yyVAL.location = loc
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:976
		{
			yyVAL.location = nil
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:982
		{
			yyVAL.inter = yyDollar[3].inter
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:986
		{
			yyVAL.inter = "null"
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:992
		{
			yyVAL.inter = yyDollar[1].str
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.inter = yyDollar[1].int64
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.inter = yyDollar[1].float64
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1004
		{
			switch s := yyDollar[2].inter.(type) {
			case int64:
				yyVAL.inter = -1 * s
			case float64:
				yyVAL.inter = -1 * s
			default:
				yyVAL.inter = yyDollar[2].inter
			}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.expr = nil
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1027
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1037
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1041
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1051
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1055
		{
			ident := &VarRef{Val: yyDollar[1].str}
			var expr, e Expr
			for i := range yyDollar[4].fields {
				expr = &BinaryExpr{LHS: ident, Op: Token(EQ), RHS: yyDollar[4].fields[i].Expr}
				if e == nil {
					e = expr
				} else {
					e = &BinaryExpr{LHS: e, Op: Token(OR), RHS: expr}
				}
			}
			yyVAL.expr = e
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1069
		{
			yyVAL.expr = &InCondition{Stmt: yyDollar[4].stmt.(*SelectStatement), Column: &VarRef{Val: yyDollar[1].str}}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1073
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1077
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1081
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1085
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1089
		{
			yyVAL.expr = &BinaryExpr{
				LHS: &VarRef{Val: yyDollar[3].str},
				RHS: &StringLiteral{Val: yyDollar[5].str},
				Op:  MATCH,
			}
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1097
		{
			yyVAL.expr = &BinaryExpr{
				LHS: &VarRef{Val: yyDollar[3].str},
				RHS: &StringLiteral{Val: yyDollar[5].str},
				Op:  MATCHPHRASE,
			}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			if yyDollar[2].int == NEQREGEX {
				switch yyDollar[3].expr.(type) {
				case *RegexLiteral:
				default:
					yylex.Error("expected regular expression")
				}
			}
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1124
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.int = EQ
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.int = NEQ
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.int = LT
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.int = LTE
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.int = GT
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.int = GTE
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.int = EQREGEX
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1158
		{
			yyVAL.int = NEQREGEX
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.int = LIKE
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = yyDollar[1].str
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1174
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1178
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str, Type: yyDollar[3].dataType}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.expr = &NumberLiteral{Val: yyDollar[1].float64}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.expr = &IntegerLiteral{Val: yyDollar[1].int64}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.expr = &StringLiteral{Val: yyDollar[1].str}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.expr = &BooleanLiteral{Val: true}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.expr = &BooleanLiteral{Val: false}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.expr = &RegexLiteral{Val: re}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1210
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str + "." + yyDollar[3].str, Type: Tag}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			switch strings.ToLower(yyDollar[1].str) {
			case "float":
				yyVAL.dataType = Float
			case "integer":
				yyVAL.dataType = Integer
			case "string":
				yyVAL.dataType = String
			case "boolean":
				yyVAL.dataType = Boolean
			case "time":
				yyVAL.dataType = Time
			case "duration":
				yyVAL.dataType = Duration
			case "unsigned":
				yyVAL.dataType = Unsigned
			default:
				yylex.Error("wrong field dataType")
			}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.dataType = Tag
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1245
		{
			yyVAL.dataType = AnyField
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1251
		{
			yyVAL.sortfs = yyDollar[3].sortfs
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1255
		{
			yyVAL.sortfs = nil
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.sortfs = []*SortField{yyDollar[1].sortf}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1265
		{
			yyVAL.sortfs = append([]*SortField{yyDollar[1].sortf}, yyDollar[3].sortfs...)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: false}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1285
		{
			yyVAL.intSlice = append(yyDollar[1].intSlice, yyDollar[2].intSlice...)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.int64 = yyDollar[1].int64
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			if n, ok := yyDollar[1].expr.(*IntegerLiteral); ok {
				yyVAL.int64 = n.Val
			} else {
				yylex.Error("unsupported type, expect integer type")
			}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1306
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1310
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1314
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1318
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1324
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1328
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1332
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1336
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1342
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: false}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1346
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: true}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1352
		{
			sms := yyDollar[4].stmt

			sms.(*CreateDatabaseStatement).Name = yyDollar[3].str
			sms.(*CreateDatabaseStatement).DatabaseAttr = yyDollar[5].databasePolicy
			yyVAL.stmt = sms
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1360
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = false
			stmt.Name = yyDollar[3].str
			stmt.DatabaseAttr = yyDollar[4].databasePolicy
			yyVAL.stmt = stmt
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1370
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: false}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1375
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: yyDollar[1].bool}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1380
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: yyDollar[3].bool}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1385
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[3].int64), EnableTagArray: yyDollar[1].bool}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1389
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: false}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1395
		{
			if strings.ToLower(yyDollar[3].str) != "array" {
				yylex.Error("unsupport type")
			}
			yyVAL.bool = true
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1402
		{
			yyVAL.bool = false
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1409
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = true
			stmt.RetentionPolicyDuration = yyDollar[2].durations.PolicyDuration
			stmt.RetentionPolicyReplication = yyDollar[2].durations.Replication
			stmt.RetentionPolicyName = yyDollar[2].durations.PolicyName
			stmt.ShardKey = yyDollar[2].durations.ShardKey
			sort.Strings(stmt.ShardKey)

			if yyDollar[2].durations.rpdefault == true {
				yylex.Error("no default")
			}

			if yyDollar[2].durations.ShardGroupDuration == -1 || yyDollar[2].durations.ShardGroupDuration == 0 {
				stmt.RetentionPolicyShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
			}

			if yyDollar[2].durations.HotDuration == -1 || yyDollar[2].durations.HotDuration == 0 {
				stmt.RetentionPolicyHotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyHotDuration = yyDollar[2].durations.HotDuration
			}

			if yyDollar[2].durations.WarmDuration == -1 || yyDollar[2].durations.WarmDuration == 0 {
				stmt.RetentionPolicyWarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyWarmDuration = yyDollar[2].durations.WarmDuration
			}

			if yyDollar[2].durations.IndexGroupDuration == -1 || yyDollar[2].durations.IndexGroupDuration == 0 {
				stmt.RetentionPolicyIndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyIndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
			}
			yyVAL.stmt = stmt
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1452
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1456
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if len(yyDollar[1].durations.ShardKey) != 0 && len(yyDollar[2].durations.ShardKey) != 0 {
				yylex.Error("Repeat ShardKey")
			} else if len(yyDollar[2].durations.ShardKey) != 0 {
				yyDollar[1].durations.ShardKey = yyDollar[2].durations.ShardKey
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}

			if yyDollar[1].durations.PolicyDuration == nil || yyDollar[2].durations.PolicyDuration == nil {
				if yyDollar[2].durations.PolicyDuration != nil {
					yyDollar[1].durations.PolicyDuration = yyDollar[2].durations.PolicyDuration
				}
			} else {
				yylex.Error("Repeat Policy Duration")
			}

			if yyDollar[1].durations.Replication == nil || yyDollar[2].durations.Replication == nil {
				if yyDollar[2].durations.Replication != nil {
					yyDollar[1].durations.Replication = yyDollar[2].durations.Replication
				}
			} else {
				yylex.Error("Repeat Policy Replication")
			}

			if len(yyDollar[1].durations.PolicyName) == 0 || len(yyDollar[2].durations.PolicyName) == 0 {
				if len(yyDollar[2].durations.PolicyName) != 0 {
					yyDollar[1].durations.PolicyName = yyDollar[2].durations.PolicyName
				}
			} else {
				yylex.Error("Repeat Policy Name")
			}

			if yyDollar[1].durations.rpdefault == false || yyDollar[2].durations.rpdefault == false {
				if yyDollar[2].durations.rpdefault == true {
					yyDollar[1].durations.rpdefault = yyDollar[2].durations.rpdefault
				}
			} else {
				yylex.Error("Repeat rpdefault")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1531
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1535
		{
			duration := yyDollar[2].tdur
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyDuration: &duration}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1540
		{
			replicaN := int(yyDollar[2].int64)
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, Replication: &replicaN}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyName: yyDollar[2].str}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, ReplicaNum: uint32(yyDollar[2].int64)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1553
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: true}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1557
		{
			if len(yyDollar[2].strSlice) == 0 {
				yylex.Error("ShardKey should not be nil")
			}
			yyVAL.durations = &Durations{ShardKey: yyDollar[2].strSlice, ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: false}
		}
	case 219:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1568
		{
			sms := &ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Source = yyDollar[6].ment
			sms.Condition = yyDollar[7].expr
			sms.SortFields = yyDollar[8].sortfs
			sms.Limit = yyDollar[9].intSlice[0]
			sms.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = sms
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1579
		{
			sms := &ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Condition = yyDollar[4].expr
			sms.SortFields = yyDollar[5].sortfs
			sms.Limit = yyDollar[6].intSlice[0]
			sms.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = sms
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1592
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1596
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1600
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1608
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1620
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{
				Database: yyDollar[5].str,
			}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1626
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1633
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 228:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1640
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Default = true
			yyVAL.stmt = stmt
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1650
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 230:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1657
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Admin = true
			yyVAL.stmt = stmt
		}
	case 231:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1665
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Rwuser = true
			yyVAL.stmt = stmt
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1676
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			stmt.Replication = int(yyDollar[4].int64)

			if yyDollar[5].durations.ShardGroupDuration == -1 || yyDollar[5].durations.ShardGroupDuration == 0 {
				stmt.ShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.ShardGroupDuration = yyDollar[5].durations.ShardGroupDuration
			}

			if yyDollar[5].durations.HotDuration == -1 || yyDollar[5].durations.HotDuration == 0 {
				stmt.HotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.HotDuration = yyDollar[5].durations.HotDuration
			}

			if yyDollar[5].durations.WarmDuration == -1 || yyDollar[5].durations.WarmDuration == 0 {
				stmt.WarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.WarmDuration = yyDollar[5].durations.WarmDuration
			}

			if yyDollar[5].durations.IndexGroupDuration == -1 || yyDollar[5].durations.IndexGroupDuration == 0 {
				stmt.IndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.IndexGroupDuration = yyDollar[5].durations.IndexGroupDuration
			}

			yyVAL.stmt = stmt
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1708
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			stmt.Replication = int(yyDollar[4].int64)
			yyVAL.stmt = stmt
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1718
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1760
		{
			yyVAL.durations = &Durations{ShardGroupDuration: yyDollar[3].tdur, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1764
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: yyDollar[3].tdur, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1768
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: yyDollar[3].tdur, IndexGroupDuration: -1}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1772
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: yyDollar[3].tdur}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1780
		{
			stmt := &ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Sources = yyDollar[4].sources
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1791
		{
			stmt := &ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Condition = yyDollar[4].expr
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.stmt = &ShowUsersStatement{}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1809
		{
			stmt := &DropDatabaseStatement{}
			stmt.Name = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1817
		{
			stmt := &DropSeriesStatement{}
			stmt.Sources = yyDollar[3].sources
			stmt.Condition = yyDollar[4].expr
			yyVAL.stmt = stmt
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1824
		{
			stmt := &DropSeriesStatement{}
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1832
		{
			stmt := &DeleteSeriesStatement{}
			stmt.Sources = yyDollar[2].sources
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1839
		{
			stmt := &DeleteSeriesStatement{}
			stmt.Condition = yyDollar[2].expr
			yyVAL.stmt = stmt
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1848
		{
			stmt := &AlterRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Duration = yyDollar[7].durations.PolicyDuration
			stmt.Replication = yyDollar[7].durations.Replication
			stmt.Default = yyDollar[7].durations.rpdefault
			if yyDollar[7].durations.ShardGroupDuration == -1 {
				stmt.ShardGroupDuration = nil
			} else {
				stmt.ShardGroupDuration = &yyDollar[7].durations.ShardGroupDuration
			}
			if yyDollar[7].durations.HotDuration == -1 {
				stmt.HotDuration = nil
			} else {
				stmt.HotDuration = &yyDollar[7].durations.HotDuration
			}
			if yyDollar[7].durations.WarmDuration == -1 {
				stmt.WarmDuration = nil
			} else {
				stmt.WarmDuration = &yyDollar[7].durations.WarmDuration
			}
			if yyDollar[7].durations.IndexGroupDuration == -1 {
				stmt.IndexGroupDuration = nil
			} else {
				stmt.IndexGroupDuration = &yyDollar[7].durations.IndexGroupDuration
			}

			if len(yyDollar[7].durations.PolicyName) > 0 || yyDollar[7].durations.ReplicaNum != 0 {
				yylex.Error("PolicyName and ReplicaNum")
			}
			yyVAL.stmt = stmt
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1886
		{
			stmt := &DropRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1895
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1903
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1911
		{
			stmt := &GrantStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1928
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[5].str}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1932
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[4].str}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1938
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1946
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1954
		{
			stmt := &RevokeStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1971
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[5].str}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1975
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[4].str}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1981
		{
			yyVAL.stmt = &DropUserStatement{Name: yyDollar[3].str}
		}
	case 261:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1987
		{
			stmt := &ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[7].sortfs
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			stmt.SLimit = yyDollar[8].intSlice[2]
			stmt.SOffset = yyDollar[8].intSlice[3]
			yyVAL.stmt = stmt

		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2001
		{
			stmt := &ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			stmt.SLimit = yyDollar[7].intSlice[2]
			stmt.SOffset = yyDollar[7].intSlice[3]
			yyVAL.stmt = stmt
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = "PRIMARYKEY"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = "SORTKEY"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = "PROPERTY"
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = "SHARDKEY"
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = "ENGINETYPE"
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = "SCHEMA"
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.str = "INDEXES"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.str = "COMPACT"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
			yylex.Error("SHOW command error, only support PRIMARYKEY, SORTKEY, SHARDKEY, ENGINETYPE, INDEXES, SCHEMA, COMPACT")
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2053
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 273:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2060
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Rp = yyDollar[6].str
			stmt.Measurement = yyDollar[8].str
			yyVAL.stmt = stmt
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2069
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2077
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Rp = yyDollar[5].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2085
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = yyDollar[2].str
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2104
		{
			stmt := &ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2114
		{
			stmt := &ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 281:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2126
		{
			stmt := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[9].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			yyVAL.stmt = stmt

		}
	case 282:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2139
		{
			stmt := yyDollar[7].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[8].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2152
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = EQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2159
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = NEQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2166
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = IN
			stmt.TagKeyExpr = yyDollar[3].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2173
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = EQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2184
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = NEQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			temp := []string{yyDollar[1].str}
			yyVAL.expr = &ListLiteral{Vals: temp}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2203
		{
			yyDollar[3].expr.(*ListLiteral).Vals = append(yyDollar[3].expr.(*ListLiteral).Vals, yyDollar[1].str)
			yyVAL.expr = yyDollar[3].expr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = yyDollar[1].str
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			stmt := &ExplainStatement{}
			stmt.Statement = yyDollar[3].stmt.(*SelectStatement)
			stmt.Analyze = true
			yyVAL.stmt = stmt
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			stmt := &ExplainStatement{}
			stmt.Statement = yyDollar[2].stmt.(*SelectStatement)
			stmt.Analyze = false
			yyVAL.stmt = stmt
		}
	case 293:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2235
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 294:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2247
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 295:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2258
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 296:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2270
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 297:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:2286
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt_temp := yyDollar[10].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[11].expr
			stmt.Dimensions = yyDollar[12].dimens
			stmt.Limit = yyDollar[13].intSlice[0]
			stmt.Offset = yyDollar[13].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 298:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2303
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 299:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2318
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 300:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2335
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt_temp := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[9].expr
			stmt.Dimensions = yyDollar[10].dimens
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 301:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2353
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 302:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2365
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 303:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2376
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 304:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2388
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2402
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			if yyDollar[5].cmOption.NumOfShards != 0 && yyDollar[5].cmOption.Type == "range" {
				yylex.Error("Not support to set num-of-shards for range sharding")
			}
			stmt.IndexType = yyDollar[5].cmOption.IndexType
			stmt.IndexList = yyDollar[5].cmOption.IndexList
			stmt.ShardKey = yyDollar[5].cmOption.ShardKey
			stmt.NumOfShards = yyDollar[5].cmOption.NumOfShards
			stmt.Type = yyDollar[5].cmOption.Type
			stmt.EngineType = yyDollar[5].cmOption.EngineType

			yyVAL.stmt = stmt
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2425
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}

			// check if PrimaryKey & SortKey is IN Tags/Fields/time
			for _, key := range yyDollar[5].cmOption.PrimaryKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField && key != "time" {
					if len(yyDollar[5].cmOption.PrimaryKey) != len(yyDollar[5].cmOption.SortKey) {
						yylex.Error("Invalid PrimaryKey")
					} else {
						yylex.Error("Invalid PrimaryKey/SortKey")
					}
					return 1
				}
			}
			for _, key := range yyDollar[5].cmOption.SortKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField && key != "time" {
					if len(yyDollar[5].cmOption.PrimaryKey) != len(yyDollar[5].cmOption.SortKey) {
						yylex.Error("Invalid SortKey")
					} else {
						yylex.Error("Invalid PrimaryKey/SortKey")
					}
					return 1
				}
			}
			// check if ShardKey is IN Tags/Fields
			for _, key := range yyDollar[5].cmOption.ShardKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField {
					yylex.Error("Invalid ShardKey")
					return 1
				}
			}
			// check if primary key is left prefix of sort key
			if len(yyDollar[5].cmOption.PrimaryKey) > len(yyDollar[5].cmOption.SortKey) {
				yylex.Error("PrimaryKey should be left prefix of SortKey")
				return 1
			}
			for i, v := range yyDollar[5].cmOption.PrimaryKey {
				if v != yyDollar[5].cmOption.SortKey[i] {
					yylex.Error("PrimaryKey should be left prefix of SortKey")
					return 1
				}
			}
			// check if indexlist of secondary is IN Tags/Fields
			for i := range yyDollar[5].cmOption.IndexType {
				indextype := yyDollar[5].cmOption.IndexType[i]
				if indextype == "timecluster" {
					continue
				}
				indexlist := yyDollar[5].cmOption.IndexList[i]
				for _, col := range indexlist {
					_, inTag := stmt.Tags[col]
					_, inField := stmt.Fields[col]
					if !inTag && !inField {
						yylex.Error("Invalid indexlist")
					}
				}
			}
			if yyDollar[5].cmOption.NumOfShards != 0 && yyDollar[5].cmOption.Type == "range" {
				yylex.Error("Not support to set num-of-shards for range sharding")
			}

			stmt.EngineType = yyDollar[5].cmOption.EngineType
			stmt.IndexType = yyDollar[5].cmOption.IndexType
			stmt.IndexList = yyDollar[5].cmOption.IndexList
			stmt.TimeClusterDuration = yyDollar[5].cmOption.TimeClusterDuration
			stmt.ShardKey = yyDollar[5].cmOption.ShardKey
			stmt.NumOfShards = yyDollar[5].cmOption.NumOfShards
			stmt.Type = yyDollar[5].cmOption.Type
			stmt.PrimaryKey = yyDollar[5].cmOption.PrimaryKey
			stmt.SortKey = yyDollar[5].cmOption.SortKey
			stmt.Property = yyDollar[5].cmOption.Property
			stmt.CompactType = yyDollar[5].cmOption.CompactType
			yyVAL.stmt = stmt
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2515
		{
			option := &CreateMeasurementStatementOption{}
			option.Type = "hash"
			option.EngineType = "tsstore"
			yyVAL.cmOption = option
		}
	case 308:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2522
		{
			option := &CreateMeasurementStatementOption{}
			if yyDollar[3].indexType != nil {
				option.IndexType = yyDollar[3].indexType.types
				option.IndexList = yyDollar[3].indexType.lists
			}
			if yyDollar[4].strSlice != nil {
				option.ShardKey = yyDollar[4].strSlice
			}
			option.NumOfShards = yyDollar[5].int64
			option.Type = yyDollar[6].str
			option.EngineType = yyDollar[2].str
			yyVAL.cmOption = option
		}
	case 309:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2539
		{
			option := &CreateMeasurementStatementOption{}
			if yyDollar[3].indexType != nil {
				option.IndexType = yyDollar[3].indexType.types
				option.IndexList = yyDollar[3].indexType.lists
				option.TimeClusterDuration = yyDollar[3].indexType.timeClusterDuration
			}
			if yyDollar[4].strSlice != nil {
				option.ShardKey = yyDollar[4].strSlice
			}
			option.NumOfShards = yyDollar[5].int64
			option.Type = yyDollar[6].str
			option.EngineType = yyDollar[2].str
			if yyDollar[7].strSlice != nil {
				option.PrimaryKey = yyDollar[7].strSlice
			} else if yyDollar[8].strSlice != nil {
				option.PrimaryKey = yyDollar[8].strSlice
			}

			if yyDollar[8].strSlice != nil {
				option.SortKey = yyDollar[8].strSlice
			} else if yyDollar[7].strSlice != nil {
				option.SortKey = yyDollar[7].strSlice
			}
			if yyDollar[9].strSlices != nil {
				option.Property = yyDollar[9].strSlices
			}
			option.CompactType = yyDollar[10].str
			yyVAL.cmOption = option
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2571
		{
			yyVAL.indexType = nil
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2575
		{
			validIndexType := map[string]struct{}{}
			validIndexType["text"] = struct{}{}
			validIndexType["field"] = struct{}{}
			if yyDollar[2].indexType == nil {
				yyVAL.indexType = nil
			} else {
				for _, indexType := range yyDollar[2].indexType.types {
					if _, ok := validIndexType[strings.ToLower(indexType)]; !ok {
						yylex.Error("Invalid index type for TSSTORE")
					}
				}
				yyVAL.indexType = yyDollar[2].indexType
			}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2592
		{
			yyVAL.indexType = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2596
		{
			validIndexType := map[string]struct{}{}
			validIndexType["bloomfilter"] = struct{}{}
			validIndexType["minmax"] = struct{}{}
			validIndexType["text"] = struct{}{}
			if yyDollar[2].indexType == nil {
				yyVAL.indexType = nil
			} else {
				for _, indexType := range yyDollar[2].indexType.types {
					if _, ok := validIndexType[strings.ToLower(indexType)]; !ok {
						yylex.Error("Invalid index type for COLUMNSTORE")
					}
				}
				yyVAL.indexType = yyDollar[2].indexType
			}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2613
		{
			indexType := strings.ToLower(yyDollar[2].str)
			if indexType != "timecluster" {
				yylex.Error("expect TIMECLUSTER for INDEXTYPE")
				return 1
			}
			indextype := &IndexType{
				types:               []string{indexType},
				lists:               [][]string{{"time"}},
				timeClusterDuration: yyDollar[4].tdur,
			}
			validIndexType := map[string]struct{}{}
			validIndexType["bloomfilter"] = struct{}{}
			validIndexType["minmax"] = struct{}{}
			if yyDollar[6].indexType == nil {
				yyVAL.indexType = indextype
			} else {
				for _, indexType := range yyDollar[6].indexType.types {
					if _, ok := validIndexType[strings.ToLower(indexType)]; !ok {
						yylex.Error("Invalid index type for COLUMNSTORE")
					}
				}
				indextype.types = append(indextype.types, yyDollar[6].indexType.types...)
				indextype.lists = append(indextype.lists, yyDollar[6].indexType.lists...)
				yyVAL.indexType = indextype
			}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2642
		{
			yyVAL.strSlice = nil
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			shardKey := yyDollar[2].strSlice
			sort.Strings(shardKey)
			yyVAL.strSlice = shardKey
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2653
		{
			yyVAL.int64 = 0
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.int64 = -1
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2661
		{
			if yyDollar[2].int64 == 0 {
				yylex.Error("syntax error: NUM OF SHARDS SHOULD LARGER THAN 0")
			}
			yyVAL.int64 = yyDollar[2].int64
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2669
		{
			yyVAL.str = "tsstore" // default engine type
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2673
		{
			yyVAL.str = "tsstore"
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2679
		{
			yyVAL.str = "columnstore"
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2684
		{
			yyVAL.strSlice = nil
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.strSlice = yyDollar[1].strSlice
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2692
		{
			yyVAL.strSlice = nil
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.strSlice = yyDollar[1].strSlice
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2700
		{
			yyVAL.strSlices = nil
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2703
		{
			yyVAL.strSlices = yyDollar[1].strSlices
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2708
		{
			yyVAL.str = "row"
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			compactionType := strings.ToLower(yyDollar[2].str)
			if compactionType != "row" && compactionType != "block" {
				yylex.Error("expect ROW or BLOCK for COMPACT type")
				return 1
			}
			yyVAL.str = compactionType
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2723
		{
			stmt := &CreateMeasurementStatement{
				Tags:   make(map[string]int32),
				Fields: make(map[string]int32),
			}
			for i := range yyDollar[2].fieldOptions {
				fType := yyDollar[2].fieldOptions[i].tagOrField
				if fType == "tag" {
					stmt.Tags[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_Tag
				} else if fType == "field" {
					fieldType := strings.ToLower(yyDollar[2].fieldOptions[i].fieldType)
					fieldName := yyDollar[2].fieldOptions[i].fieldName
					if fieldType == "int64" {
						stmt.Fields[fieldName] = influx.Field_Type_Int
					} else if fieldType == "float64" {
						stmt.Fields[fieldName] = influx.Field_Type_Float
					} else if fieldType == "string" {
						stmt.Fields[fieldName] = influx.Field_Type_String
					} else if fieldType == "bool" {
						stmt.Fields[fieldName] = influx.Field_Type_Boolean
					} else {
						yylex.Error("expect FLOAT64, INT64, BOOL, STRING for column data type")
						return 1 // syntax error
					}
				}
			}
			yyVAL.stmt = stmt
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2752
		{
			yyVAL.stmt = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2758
		{
			fields := []*fieldList{yyDollar[1].fieldOption}
			yyVAL.fieldOptions = append(fields, yyDollar[2].fieldOptions...)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.fieldOptions = []*fieldList{yyDollar[1].fieldOption}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2770
		{
			yyVAL.fieldOption = yyDollar[1].fieldOption
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2775
		{
			yyVAL.fieldOption = yyDollar[1].fieldOption
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2781
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  "string",
				tagOrField: "tag",
			}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2790
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "field",
			}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2799
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "field",
			}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2809
		{
			yyVAL.indexType = &IndexType{
				types: []string{yyDollar[1].str},
				lists: [][]string{yyDollar[3].strSlice},
			}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2817
		{
			yyVAL.indexType = &IndexType{
				types: []string{"field"},
				lists: [][]string{yyDollar[3].strSlice},
			}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			indextype := yyDollar[1].indexType
			if yyDollar[2].indexType != nil {
				indextype.types = append(indextype.types, yyDollar[2].indexType.types...)
				indextype.lists = append(indextype.lists, yyDollar[2].indexType.lists...)
			}
			yyVAL.indexType = indextype
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2835
		{
			yyVAL.indexType = nil
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2841
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{

			yyVAL.strSlice = append([]string{yyDollar[1].str}, yyDollar[3].strSlice...)
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2852
		{
			shardType := strings.ToLower(yyDollar[2].str)
			if shardType != "hash" && shardType != "range" {
				yylex.Error("expect HASH or RANGE for TYPE")
				return 1
			}
			yyVAL.str = shardType
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2861
		{
			yyVAL.str = "hash"
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2873
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2879
		{
			m := yyDollar[1].strSlices
			if yyDollar[3].strSlices != nil {
				m[0] = append(m[0], yyDollar[3].strSlices[0]...)
				m[1] = append(m[1], yyDollar[3].strSlices[1]...)
			}
			yyVAL.strSlices = m
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2889
		{
			yyVAL.strSlices = yyDollar[1].strSlices
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.strSlices = yyDollar[2].strSlices
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2901
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {yyDollar[3].str}}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2905
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {fmt.Sprintf("%d", yyDollar[3].int64)}}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2909
		{
			yyVAL.strSlices = nil
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.strSlice = append(yyDollar[1].strSlice, yyDollar[3].str)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2924
		{
			yyVAL.str = yyDollar[1].str
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2930
		{
			stmt := &DropShardStatement{}
			stmt.ID = uint64(yyDollar[3].int64)
			yyVAL.stmt = stmt
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2938
		{
			stmt := &SetPasswordUserStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2949
		{
			stmt := &ShowGrantsForUserStatement{}
			stmt.Name = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 362:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2957
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 363:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2969
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 364:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2980
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 365:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2992
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 366:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3006
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 367:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3018
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 368:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3029
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3041
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3055
		{
			stmt := &ShowShardsStatement{}
			yyVAL.stmt = stmt
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3060
		{
			stmt := &ShowShardsStatement{mstInfo: yyDollar[4].ment}
			yyVAL.stmt = stmt
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3068
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.ShardKey = yyDollar[6].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3079
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.Type = "hash"
			yyVAL.stmt = stmt
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3093
		{
			stmt := &ShowShardGroupsStatement{}
			yyVAL.stmt = stmt
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3100
		{
			stmt := &DropMeasurementStatement{}
			stmt.Name = yyDollar[3].str
			stmt.RpName = ""
			yyVAL.stmt = stmt
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3107
		{
			stmt := &DropMeasurementStatement{}
			stmt.Name = yyDollar[5].str
			stmt.RpName = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 377:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3117
		{
			stmt := &CreateContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
				Source:   yyDollar[9].stmt.(*SelectStatement),
			}
			if yyDollar[7].cqsp != nil {
				stmt.ResampleEvery = yyDollar[7].cqsp.ResampleEvery
				stmt.ResampleFor = yyDollar[7].cqsp.ResampleFor
			}
			yyVAL.stmt = stmt
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3132
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
			}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3138
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleFor: yyDollar[3].tdur,
			}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3144
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
				ResampleFor:   yyDollar[5].tdur,
			}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3151
		{
			yyVAL.cqsp = nil
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3157
		{
			yyVAL.stmt = &ShowContinuousQueriesStatement{}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3163
		{
			yyVAL.stmt = &DropContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
			}
		}
	case 384:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3171
		{
			stmt := yyDollar[9].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[4].str
			stmt.Ops = yyDollar[6].fields
			yyVAL.stmt = stmt
		}
	case 385:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:3178
		{
			stmt := yyDollar[11].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[6].str
			stmt.DbName = yyDollar[4].str
			stmt.Ops = yyDollar[8].fields
			yyVAL.stmt = stmt
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3186
		{
			stmt := yyDollar[7].stmt.(*CreateDownSampleStatement)
			stmt.Ops = yyDollar[4].fields
			yyVAL.stmt = stmt
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3194
		{
			yyVAL.stmt = &DropDownSampleStatement{
				RpName: yyDollar[4].str,
			}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3200
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName: yyDollar[4].str,
				RpName: yyDollar[6].str,
			}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3207
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DropAll: true,
			}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3213
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName:  yyDollar[4].str,
				DropAll: true,
			}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3222
		{
			yyVAL.stmt = &ShowDownSampleStatement{}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3226
		{
			yyVAL.stmt = &ShowDownSampleStatement{
				DbName: yyDollar[4].str,
			}
		}
	case 393:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3234
		{
			yyVAL.stmt = &CreateDownSampleStatement{
				Duration:       yyDollar[2].tdur,
				SampleInterval: yyDollar[5].tdurs,
				TimeInterval:   yyDollar[9].tdurs,
			}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			yyVAL.tdurs = []time.Duration{yyDollar[1].tdur}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3248
		{
			yyVAL.tdurs = append([]time.Duration{yyDollar[1].tdur}, yyDollar[3].tdurs...)
		}
	case 396:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3255
		{
			stmt := &CreateStreamStatement{
				Name:  yyDollar[3].str,
				Query: yyDollar[6].stmt,
				Delay: yyDollar[8].tdur,
			}
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into clause only support one target")
			}
			if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3277
		{
			stmt := &CreateStreamStatement{
				Name:  yyDollar[3].str,
				Query: yyDollar[6].stmt,
			}
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into clause only support one target")
			}
			if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3300
		{
			yyVAL.stmt = &ShowStreamsStatement{}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3304
		{
			yyVAL.stmt = &ShowStreamsStatement{Database: yyDollar[4].str}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3310
		{
			yyVAL.stmt = &DropStreamsStatement{Name: yyDollar[3].str}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3315
		{
			yyVAL.stmt = &ShowQueriesStatement{}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3320
		{
			yyVAL.stmt = &KillQueryStatement{QueryID: uint64(yyDollar[3].int64)}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3326
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3330
		{
			yyVAL.strSlice = append([]string{yyDollar[1].str}, yyDollar[3].strSlice...)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3336
		{
			yyVAL.str = "ALL"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3340
		{
			yyVAL.str = "ANY"
		}
	case 407:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3346
		{
			yyVAL.stmt = &CreateSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: yyDollar[7].str, Destinations: yyDollar[10].strSlice, Mode: yyDollar[9].str}
		}
	case 408:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3350
		{
			yyVAL.stmt = &CreateSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: "", Destinations: yyDollar[8].strSlice, Mode: yyDollar[7].str}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3356
		{
			yyVAL.stmt = &ShowSubscriptionsStatement{}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3362
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: "", Database: "", RetentionPolicy: ""}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3366
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: "", Database: yyDollar[5].str, RetentionPolicy: ""}
		}
	case 412:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3370
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: yyDollar[7].str}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3374
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: ""}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3380
		{
			stmt := &ShowConfigsStatement{}
			yyVAL.stmt = stmt
		}
	case 415:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3387
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3395
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].int64
			yyVAL.stmt = stmt
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3403
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].float64
			yyVAL.stmt = stmt
		}
	case 418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3411
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3419
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3429
		{
			stmt := &ShowClusterStatement{}
			stmt.NodeID = 0
			yyVAL.stmt = stmt
		}
	case 421:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3435
		{
			stmt := &ShowClusterStatement{}
			stmt.NodeID = 0
			if strings.ToLower(yyDollar[4].str) == "nodetype" {
				stmt.NodeType = yyDollar[6].str
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3446
		{
			stmt := &ShowClusterStatement{}
			if strings.ToLower(yyDollar[4].str) == "nodeid" {
				stmt.NodeID = yyDollar[6].int64
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 423:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3456
		{
			stmt := &ShowClusterStatement{}
			if strings.ToLower(yyDollar[4].str) == "nodeid" {
				stmt.NodeID = yyDollar[6].int64
			} else {
				yylex.Error("Invalid where clause")
			}
			if strings.ToLower(yyDollar[8].str) == "nodetype" {
				stmt.NodeType = yyDollar[10].str
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	case 424:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3471
		{
			stmt := &ShowClusterStatement{}
			if strings.ToLower(yyDollar[4].str) == "nodetype" {
				stmt.NodeType = yyDollar[6].str
			} else {
				yylex.Error("Invalid where clause")
			}
			if strings.ToLower(yyDollar[8].str) == "nodeid" {
				stmt.NodeID = yyDollar[10].int64
			} else {
				yylex.Error("Invalid where clause")
			}
			yyVAL.stmt = stmt
		}
	}
	goto yystack /* stack new state and value */
}
